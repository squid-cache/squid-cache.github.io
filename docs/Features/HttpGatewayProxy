---
FaqSection: operation
---
# Gateway Proxy

Occasionally people have trouble understanding gateway proxy and
caches, usually resulting from mixed up interpretations of "incoming"
and "outgoing" data. I think in terms of requests (i.e., an outgoing
request is from the local site out to the big bad Internet). The data
received in reply is incoming, of course. Others think in the opposite
sense of "a request for incoming data".

A gateway caches incoming requests for outgoing data (i.e., that
which you publish to the world). It takes load away from your HTTP origin
server and internal network. You move the server away from port 80 (or
whatever your published port is), and substitute the gateway proxy, which
then pulls the HTTP data from the "real" HTTP origin server (only the
gateway proxy needs to know where the origin server is). The outside world
sees no difference (apart from an increase in speed, with luck).

Quite apart from taking the load of a site's normal origin server,
gateways can also sit outside firewalls or other network bottlenecks
and talk to HTTP servers inside, reducing traffic across the bottleneck
and simplifying the configuration. Two or more gateways
communicating via HTCP can increase the speed and resilience of a web
service to any single failure.

Squid can act as a single gateway for multiple origin servers. If you
need to move parts of your filesystem from
one server to another, or if separately administered HTTP servers should
logically appear under a single URL hierarchy, the gateway makes the
right thing happen.

If you wish only to cache the "rest of the world" to improve local users
browsing performance, then this mode is irrelevant. Sites which
own and publish a URL hierarchy use a gateway proxy to improve access to
it from the Internet. Sites wishing to improve their local users' access
to other sites' URLs use proxy caches. Many sites, like us, do both and
hence run both.

Measurement of the Squid cache and its Harvest counterpart suggest an
order of magnitude performance improvement over CERN or other widely
available caching software. This order of magnitude performance
improvement on hits suggests that the cache can serve as an httpd
accelerator, a cache configured to act as a site's primary httpd server
(on port 80), forwarding references that miss to the site's real httpd
(on port 81).

In such a configuration, the web administrator renames all non-cachable
URLs to the servers port (81). The cache serves references to cachable
objects, such as HTML pages and GIFs, and the origin server (on port 81)
serves references to non-cachable objects, such as queries and cgi-bin
programs. If a site's usage characteristics tend toward cachable
objects, this configuration can dramatically reduce the site's web
workload.

## How do I set it up?

Several configurations are possible. The
[ConfigExamples](/ConfigExamples/Reverse)
section details several variations of Gateway Proxy.

{% include pages-list-by-path.html dir="/ConfigExamples/Reverse"%}

## Running the web server on the same server

While not generally recommended it is possible to run both the
gateway and origin server on the same host. To do this you
need to make them listen on different IP addresses. Usually the loopback
address (127.0.0.1 or ::1) is used for the origin server.

In Squid this is done by specifying the public IP address or domain name in
[http_port](http://www.squid-cache.org/Doc/config/http_port), and
using loopback address for the origin server:

```
    http_port example.com:80 accel defaultsite=example.com
    cache_peer 127.0.0.1 parent 80 0 originserver no-query
```

And [Apache](http://www.apache.org/) may be configured like in
*httpd.conf* to listen on the loopback address:
```
    Port 80
    BindAddress 127.0.0.1
```

Other origin servers use similar directives specifying the address where
it should listen for requests. See the manual to your origin server for
details.

## Load balancing of origin servers

To load balance requests among a set of origin servers see [Load Balancing](/Features/LoadBalance).


### The port number or host name for redirects or CGI-generated content is wrong

This happens if the port or domain name known by the origin
server is different from what the client is using to contact the
gateway proxy. When your origin server issues a redirect message
(e.g. `302 Moved Temporarily`) or generates absolute URLs, it
only knows the host and port it's configured with and
uses these to build the URL. Then, when the client requests the
redirected URL - it could bypass the gateway proxy or find the
origin server completely unreachable.

HTTP/1.1 and provide mechanisms enabling "virtual hosting".
Squid operating in gateway mode provide support for this by
default. Though it can be broken by either:
 * setting `no-vhost` on [http_port](http://www.squid-cache.org/Doc/config/http_port), or
 * setting `forceddomain=example.com` on [cache_peer](http://www.squid-cache.org/Doc/config/cache_peer)
 * not having virtual hosting enabled at the origin server.


### Access to password protected content fails via the Gateway Proxy

When content on the origin server is password protected then you need to
tell the proxy to trust your origin server with authentication credentials.
This is done via the `login=` option to
[cache_peer](http://www.squid-cache.org/Doc/config/cache_peer).

Normally you would use `login=PASS` to have the login information
forwarded. The other alternatives are meant to be used when the
gateway proxy authenticates clients, but you like to have
information about the user forwarded to the origin server.
```
    cache_peer 192.0.2.1 parent 80 0 originserver login=PASS
```
> :information_source:
    To pass details back as given **`login=PASS`** is an exact string

### Visitor requests can force fetching new objects from the origin server

Client requests can contain `Cache-Control:` settings specifying
`no-cache`, `must-revalidate`, or low `max-age=0` which cause Squid to
revalidate or fetch new content from the origin server rather
earlier than needed. This raises load on the delivery system which can
lead to bandwidth problems and rising costs.

The **`ignore-cc`** option is available on [http_port](http://www.squid-cache.org/Doc/config/http_port)
configured with `accel` mode. This option informs Squid to
ignore the clients `Cache-Control` headers and depend solely on
theose provided by the origin server.
```
    http_port 80 accel ignore-cc
```
